<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:Adorners="clr-namespace:Hjmos.Lcdp.VisualEditor.Core.Adorners"
                    xmlns:ControlConvertors="clr-namespace:Hjmos.Lcdp.VisualEditor.Core.DesignerControls.Converters"
                    xmlns:Controls="clr-namespace:Hjmos.Lcdp.VisualEditor.Core.Controls"
                    xmlns:Converters="clr-namespace:Hjmos.Lcdp.Converters;assembly=Hjmos.Lcdp.Converters"
                    xmlns:Converters2="clr-namespace:Hjmos.Lcdp.VisualEditor.Core.Converters"
                    xmlns:Core="clr-namespace:Hjmos.Lcdp.VisualEditor.Core"
                    xmlns:Thumbs="clr-namespace:Hjmos.Lcdp.VisualEditor.Core.Thumbs"
                    xmlns:Widgets="clr-namespace:Hjmos.Lcdp.VisualEditor.Core.DesignerControls">
    <ControlConvertors:HandleLengthWithOffset x:Key="HandleLengthWithOffset" />
    <SolidColorBrush x:Key="HandleBrush" Color="#FF474747" />
    <Style TargetType="{x:Type Core:PanelMoveAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Core:PanelMoveAdorner}">
                    <Border Margin="-2" BorderBrush="Transparent" BorderThickness="4" Cursor="SizeAll" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="{x:Type Controls:EnumButton}">
        <Setter Property="Margin" Value="3,3,0,3" />
        <Setter Property="Foreground" Value="#FF000000" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="Background" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid Background="{TemplateBinding Background}">
                                <Border x:Name="BackgroundAnimation" Background="#FF448DCA" Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="SkyBlue" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Thumbs:DesignerThumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumbs:DesignerThumb}">
                    <Grid>
                        <Rectangle Name="thumbRectangle" Fill="White" RadiusX="1.414" RadiusY="1.414" SnapsToDevicePixels="True"
                                   Stroke="Black" />
                        <Menu Width="15" Height="15" Margin="0,-19,-19,0" HorizontalAlignment="Left" VerticalAlignment="Top"
                              Background="Transparent" BorderThickness="0"
                              Visibility="{Binding Path=OperationMenu, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:CollapsedWhenNullConverter.Instance}}">
                            <MenuItem Width="15" Height="15" Padding="0" Background="Transparent" BorderThickness="1"
                                      ItemsSource="{TemplateBinding OperationMenu}">
                                <MenuItem.Header>
                                    <Path Data="M3.5,5.5 L11.5,5.5 L7.5,11 z" Fill="Black" Stroke="Gray" StrokeThickness="1" />
                                </MenuItem.Header>
                            </MenuItem>
                        </Menu>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPrimarySelection" Value="False">
                            <Setter TargetName="thumbRectangle" Property="Stroke" Value="White" />
                            <Setter TargetName="thumbRectangle" Property="Fill" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="thumbRectangle" Property="Fill" Value="Gray" />
                        </Trigger>
                        <Trigger Property="ThumbVisible" Value="False">
                            <Setter TargetName="thumbRectangle" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- TODO: 为什么WPFDesigner中不用重新写这个，直接用了DesignerThumb的样式 -->
    <Style TargetType="{x:Type Thumbs:ResizeThumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumbs:ResizeThumb}">
                    <Grid>
                        <Rectangle Name="thumbRectangle" Fill="White" RadiusX="1.414" RadiusY="1.414" SnapsToDevicePixels="True"
                                   Stroke="Black" />
                        <Menu Width="15" Height="15" Margin="0,-19,-19,0" HorizontalAlignment="Left" VerticalAlignment="Top"
                              Background="Transparent" BorderThickness="0"
                              Visibility="{Binding Path=OperationMenu, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:CollapsedWhenNullConverter.Instance}}">
                            <MenuItem Width="15" Height="15" Padding="0" Background="Transparent" BorderThickness="1"
                                      ItemsSource="{TemplateBinding OperationMenu}">
                                <MenuItem.Header>
                                    <Path Data="M3.5,5.5 L11.5,5.5 L7.5,11 z" Fill="Black" Stroke="Gray" StrokeThickness="1" />
                                </MenuItem.Header>
                            </MenuItem>
                        </Menu>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPrimarySelection" Value="False">
                            <Setter TargetName="thumbRectangle" Property="Stroke" Value="White" />
                            <Setter TargetName="thumbRectangle" Property="Fill" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="thumbRectangle" Property="Fill" Value="Gray" />
                        </Trigger>
                        <Trigger Property="ThumbVisible" Value="False">
                            <Setter TargetName="thumbRectangle" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Thumbs:PointThumb}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumbs:PointThumb}">
                    <Grid Margin="-3.5,-3.5,0,0" HorizontalAlignment="Left" VerticalAlignment="Top">
                        <Grid.Resources>
                            <Converters:DoubleOffsetConverter x:Key="PointOffset" Offset="3.5" />
                        </Grid.Resources>
                        <Line HorizontalAlignment="Left" VerticalAlignment="Top"
                              Stroke="{TemplateBinding Foreground}"
                              StrokeDashArray="2 2" StrokeThickness="1"
                              Visibility="{Binding Path=RelativeToPoint, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:CollapsedWhenNullConverter.Instance}}"
                              X1="3.5"
                              X2="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PointOffset}, Path=RelativeToPoint.X}"
                              Y1="3.5"
                              Y2="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource PointOffset}, Path=RelativeToPoint.Y}" />
                        <Grid Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Top">
                            <Grid.Resources>
                                <Style TargetType="MenuItem">
                                    <Setter Property="HorizontalContentAlignment" Value="Left" />
                                    <Setter Property="VerticalContentAlignment" Value="Center" />
                                </Style>
                            </Grid.Resources>
                            <Rectangle Name="thumbRectangle" Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Top"
                                       Fill="White" RadiusX="1.414" RadiusY="1.414" SnapsToDevicePixels="True"
                                       Stroke="{TemplateBinding Foreground}" />
                            <Ellipse Name="thumbElipse" Width="7" Height="7" HorizontalAlignment="Left" VerticalAlignment="Top"
                                     Fill="White" SnapsToDevicePixels="True"
                                     Stroke="{TemplateBinding Foreground}"
                                     Visibility="Collapsed" />
                            <Menu Width="15" Height="15" Margin="0,-19,-19,0" HorizontalAlignment="Left" VerticalAlignment="Top"
                                  Background="Transparent" BorderThickness="0" Foreground="Black"
                                  Visibility="{Binding Path=OperationMenu, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:CollapsedWhenNullConverter.Instance}}">
                                <MenuItem Width="15" Height="15" Padding="0" Background="Transparent" BorderThickness="1"
                                          ItemsSource="{TemplateBinding OperationMenu}"
                                          RenderTransform="{TemplateBinding InnerRenderTransform}">
                                    <MenuItem.Header>
                                        <Path Data="M3.5,5.5 L11.5,5.5 L7.5,11 z" Fill="Black" Stroke="Gray" StrokeThickness="1" />
                                    </MenuItem.Header>
                                </MenuItem>
                            </Menu>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPrimarySelection" Value="False">
                            <Setter TargetName="thumbRectangle" Property="Stroke" Value="White" />
                            <Setter TargetName="thumbRectangle" Property="Fill" Value="Black" />
                            <Setter TargetName="thumbElipse" Property="Fill" Value="Black" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="thumbRectangle" Property="Fill" Value="Gray" />
                        </Trigger>
                        <Trigger Property="IsEllipse" Value="True">
                            <Setter TargetName="thumbRectangle" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="thumbElipse" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ThumbVisible" Value="False">
                            <Setter TargetName="thumbRectangle" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="thumbElipse" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Thumbs:RotateThumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumbs:RotateThumb}">
                    <Grid>
                        <Rectangle Width="2" Height="30" Margin="0,0,0,0" VerticalAlignment="Top" Fill="Black" />
                        <Ellipse Name="thumbRectangle" Width="7" Height="7" VerticalAlignment="Top" Fill="Black"
                                 SnapsToDevicePixels="True" Stroke="Black" StrokeThickness="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Controls:SelectionFrame}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:SelectionFrame}">
                    <Rectangle Fill="#519ABFE5" Stroke="#FF7A8787" StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Controls:ContainerDragHandle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:ContainerDragHandle}">
                    <Canvas Name="Canvas" Width="13" Height="13" SnapsToDevicePixels="True">
                        <Rectangle Name="BorderRectangle" Width="13" Height="13" Fill="#889ABFE5" RadiusX="2" RadiusY="2"
                                   Stroke="#FF7A8FB5" StrokeThickness="1" />
                        <Path Canvas.Left="1" Canvas.Top="1" Fill="#FF748EAA">
                            <Path.Data>
                                <GeometryGroup>
                                    <PathGeometry Figures="M5.5,0L3,3L8,3 M11,5.5L8,3L8,8 M5.5,11L3,8L8,8 M0,5.5L3,3L3,8" />
                                    <RectangleGeometry Rect="3,5,5,1" />
                                    <RectangleGeometry Rect="5,3,1,5" />
                                    <RectangleGeometry Rect="5,5,1,1" />
                                </GeometryGroup>
                            </Path.Data>
                        </Path>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Widgets:WindowClone}">
        <Setter Property="Width" Value="640" />
        <Setter Property="Height" Value="480" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Widgets:WindowClone}">
                    <Border Background="{DynamicResource {x:Static SystemColors.GradientActiveCaptionBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1,1,1,1">
                        <DockPanel Margin="4,0,4,4">
                            <DockPanel Height="26" DockPanel.Dock="Top">
                                <Image Width="16" Height="16" Margin="1,0,0,0"
                                       Source="/Hjmos.Lcdp.VisualEditor.Assets;component/Images/Icons.32x32.EmptyProjectIcon.png"
                                       Visibility="{Binding Path=(Window.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:CollapsedWhenNotNullConverter.Instance}}" />
                                <Image Width="16" Height="16" Margin="1,0,0,0"
                                       Source="{TemplateBinding Window.Icon}"
                                       Visibility="{Binding Path=(Window.Icon), RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:CollapsedWhenZeroConverter.Instance}}" />
                                <Button Name="CloseButton" Width="43" Height="17" VerticalAlignment="Top" Content="r" DockPanel.Dock="Right"
                                        FontFamily="Marlett" />
                                <Button Name="MinimizeButton" Width="25" Height="17" VerticalAlignment="Top" Content="1"
                                        DockPanel.Dock="Right" FontFamily="Marlett"
                                        Visibility="{Binding Path=(Window.ResizeMode), Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:EnumCollapsedConverter.Instance}, ConverterParameter=NoResize}" />
                                <Button Name="MaximiseButton" Width="25" Height="17" VerticalAlignment="Top" Content="0"
                                        DockPanel.Dock="Right" FontFamily="Marlett"
                                        Visibility="{Binding Path=(Window.ResizeMode), Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static Converters:EnumCollapsedConverter.Instance}, ConverterParameter=NoResize}" />
                                <Label Margin="4,0,0,0" Content="{TemplateBinding Window.Title}" />
                            </DockPanel>
                            <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                <Border Background="{TemplateBinding Panel.Background}" BorderBrush="{TemplateBinding Border.BorderBrush}" BorderThickness="{TemplateBinding Border.BorderThickness}" ClipToBounds="True">
                                    <AdornerDecorator>
                                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" />
                                    </AdornerDecorator>
                                </Border>
                            </Border>
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Widgets:ErrorBalloon}">
        <Setter Property="WindowStyle" Value="None" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="SizeToContent" Value="WidthAndHeight" />
        <Setter Property="ShowInTaskbar" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Widgets:ErrorBalloon}">
                    <Grid x:Name="LayoutRoot">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Rectangle Margin="12,36,4,4" RadiusX="10" RadiusY="10">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="#41626262" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border Margin="8,32,8,8" Padding="10,10,10,10"
                                Background="{DynamicResource {x:Static SystemColors.InfoBrushKey}}"
                                BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                                BorderThickness="1,1,1,1" CornerRadius="10,10,10,10">
                            <Border Background="{TemplateBinding Panel.Background}" BorderBrush="{TemplateBinding Border.BorderBrush}" BorderThickness="{TemplateBinding Border.BorderThickness}">
                                <AdornerDecorator>
                                    <ContentPresenter Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" />
                                </AdornerDecorator>
                            </Border>
                        </Border>
                        <Path Width="15.25" Height="24.5" Margin="34.75,9.25,0,0" HorizontalAlignment="Left"
                              VerticalAlignment="Top" Data="M34.75,33.75 L40.5,9.25 50,33.5 z"
                              Fill="{DynamicResource {x:Static SystemColors.InfoBrushKey}}"
                              Stretch="Fill" />
                        <Path Width="16" Height="24" Margin="34.5,9.25,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"
                              Data="M35,32.75 L40.5,9.25 50,32.75" Stretch="Fill"
                              Stroke="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 网格行分割器 -->
    <Style TargetType="{x:Type Adorners:GridRowSplitterAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Adorners:GridRowSplitterAdorner}">
                    <Grid Height="{x:Static Adorners:GridRailAdorner.SplitterWidth}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="10" />
                            <!-- 10=RailSize -->
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!--
                            put a transparent rectangle in the rail so the user does not have to hit the small railHandle
                            在轨道中放置一个透明的矩形，这样用户就不必点击小的三角形铁轨手柄
                        -->
                        <Rectangle Fill="Transparent" />
                        <!-- 铁轨上的三角形手柄 -->
                        <Path Name="railHandle" Data="M0,0 L0,1 1,0.5 z" Fill="#FFE6E6FF" Stretch="Fill" Stroke="DodgerBlue" />
                        <!-- 三角形手柄延伸的分割线 -->
                        <Path Name="line" Grid.Column="2" Margin="-1,0,0,0" Data="M0,0.5 L1,0.5" Stretch="Fill"
                              Stroke="DodgerBlue" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- 鼠标覆盖的时候，三角形手柄显示黄色 -->
                            <Setter TargetName="railHandle" Property="Fill" Value="#FFFFB74F" />
                        </Trigger>
                        <Trigger Property="IsPreview" Value="True">
                            <!-- 预览分割器的样式 -->
                            <Setter TargetName="railHandle" Property="Stroke" Value="#D0FFB74F" />
                            <Setter TargetName="line" Property="Stroke" Value="#D0FFB74F" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 网格列分割器 -->
    <Style TargetType="{x:Type Adorners:GridColumnSplitterAdorner}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Adorners:GridColumnSplitterAdorner}">
                    <Grid Width="{x:Static Adorners:GridRailAdorner.SplitterWidth}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="10" />
                            <!-- 10=RailSize -->
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <!--
                            put a transparent rectangle in the rail so the user does not have to hit the small railHandle
                            在轨道中放置一个透明的矩形，这样用户就不必点击小的三角形铁轨手柄
                        -->
                        <Rectangle Fill="Transparent" />
                        <!-- 铁轨上的三角形手柄 -->
                        <Path Name="railHandle" Data="M0,0 L1,0 0.5,1 z" Fill="#FFE6E6FF" Stretch="Fill" Stroke="DodgerBlue" />
                        <!-- 三角形手柄延伸的分割线 -->
                        <Path Name="line" Grid.Row="2" Margin="0,-1,0,0" Data="M0.5,0 L0.5,1" Stretch="Fill" Stroke="DodgerBlue" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- 鼠标覆盖的时候，三角形手柄显示黄色 -->
                            <Setter TargetName="railHandle" Property="Fill" Value="#FFFFB74F" />
                        </Trigger>
                        <Trigger Property="IsPreview" Value="True">
                            <!-- 预览分割器的样式 -->
                            <Setter TargetName="railHandle" Property="Stroke" Value="#D0FFB74F" />
                            <Setter TargetName="line" Property="Stroke" Value="#D0FFB74F" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Widgets:CanvasPositionHandle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Widgets:MarginHandle}">
                    <Grid Width="{Binding Path=HandleLength, Converter={x:Static ControlConvertors:HandleLengthWithOffset.Instance}, RelativeSource={RelativeSource Mode=TemplatedParent}}" Height="10" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="8" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Path Name="startArrow" Grid.Column="0" Margin="0,1,0,1" Data="M0,0 L0,1 1,0.5 z"
                              Fill="{StaticResource HandleBrush}"
                              Stretch="Fill"
                              Stroke="{TemplateBinding Panel.Background}"
                              StrokeThickness="0.5" />
                        <!-- Wrap the handle-line and endArrow in this grid. It's visiblity is subjected to HandleLength -->
                        <Grid Name="lineArrow" Grid.Column="1" Height="10">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition MinWidth="10" MaxWidth="20" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Rectangle Grid.Column="0" Grid.ColumnSpan="4" Height="10" Fill="Transparent" />
                            <Path Name="line1" Grid.Column="0" Margin="0,0,0,0" Data="M0,-0.75 L1,-0.75" Stretch="Fill"
                                  Stroke="{StaticResource HandleBrush}"
                                  StrokeDashArray="2,2" StrokeThickness="1.5" />
                            <TextBlock Grid.Column="1" Padding="1,1,1,1" HorizontalAlignment="Center" VerticalAlignment="Center"
                                       FontSize="9"
                                       Text="{Binding Path=HandleLength, Mode=OneWay, Converter={x:Static Converters:FormatDoubleConverter.Instance}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <TextBlock.LayoutTransform>
                                    <RotateTransform Angle="{Binding Path=TextTransform, RelativeSource={RelativeSource Mode=TemplatedParent}}" CenterX="0.5" CenterY="0.5" />
                                </TextBlock.LayoutTransform>
                            </TextBlock>
                            <Path Name="line2" Grid.Column="2" Margin="0,0,0,0" Data="M0,-0.75 L1,-0.75" Stretch="Fill"
                                  Stroke="{StaticResource HandleBrush}"
                                  StrokeDashArray="2,2" StrokeThickness="1.5" />
                            <!--<Path Name="arrow2" Margin="0,1,0,1" Fill="{StaticResource HandleBrush}" Stretch="Fill" Stroke="{TemplateBinding Panel.Background}" StrokeThickness="0.5" Data="M0,0 L0,1 1,0.5 z" Grid.Column="3" />-->
                            <!--<Rectangle Width="1.5" Fill="{StaticResource HandleBrush}" Grid.Column="4"/>-->
                        </Grid>
                        <!-- Rotate the handle and angle of rotation being set by the Margin type. See enum HandleOrientation -->
                        <Grid.LayoutTransform>
                            <RotateTransform Angle="{Binding Path=Angle, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </Grid.LayoutTransform>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Widgets:MarginHandle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Widgets:MarginHandle}">
                    <Grid Width="{Binding Path=HandleLength, Converter={x:Static ControlConvertors:HandleLengthWithOffset.Instance}, RelativeSource={RelativeSource Mode=TemplatedParent}}" Height="10" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="8" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Path Name="startArrow" Grid.Column="0" Margin="0,1,0,1" Data="M0,0 L0,1 1,0.5 z"
                              Fill="{StaticResource HandleBrush}"
                              Stretch="Fill"
                              Stroke="{TemplateBinding Panel.Background}"
                              StrokeThickness="0.5" />
                        <!-- 将手柄的线和箭头包装在这个网格中。它的可见性取决于HandleLength -->
                        <Grid Name="lineArrow" Grid.Column="1" Height="10">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="10" MinWidth="10" MaxWidth="20" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="8" />
                                <ColumnDefinition Width="1.5" />
                            </Grid.ColumnDefinitions>
                            <Rectangle Grid.Column="0" Grid.ColumnSpan="4" Height="10" Fill="Transparent" />
                            <Path Name="line1" Grid.Column="0" Margin="0,0,0,0" Data="M0,-0.75 L1,-0.75" Stretch="Fill"
                                  Stroke="{StaticResource HandleBrush}"
                                  StrokeThickness="1.5" />
                            <TextBlock Grid.Column="1" Padding="1,1,1,1" HorizontalAlignment="Center" VerticalAlignment="Center"
                                       FontSize="9"
                                       Text="{Binding Path=HandleLength, Mode=OneWay, Converter={x:Static Converters:FormatDoubleConverter.Instance}, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <TextBlock.LayoutTransform>
                                    <RotateTransform Angle="{Binding Path=TextTransform, RelativeSource={RelativeSource Mode=TemplatedParent}}" CenterX="0.5" CenterY="0.5" />
                                </TextBlock.LayoutTransform>
                            </TextBlock>
                            <Path Name="line2" Grid.Column="2" Margin="0,0,0,0" Data="M0,-0.75 L1,-0.75" Stretch="Fill"
                                  Stroke="{StaticResource HandleBrush}"
                                  StrokeThickness="1.5" />
                            <Path Name="arrow2" Grid.Column="3" Margin="0,1,0,1" Data="M0,0 L0,1 1,0.5 z"
                                  Fill="{StaticResource HandleBrush}"
                                  Stretch="Fill"
                                  Stroke="{TemplateBinding Panel.Background}"
                                  StrokeThickness="0.5" />
                            <Rectangle Grid.Column="4" Width="1.5" Fill="{StaticResource HandleBrush}" />
                        </Grid>
                        <!-- 旋转手柄和由边距类型设置的旋转角度。查看enum HandleOrientation -->
                        <Grid.LayoutTransform>
                            <RotateTransform Angle="{Binding Path=Angle, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        </Grid.LayoutTransform>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Widgets:MarginStub}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Widgets:MarginStub}">
                    <Grid Width="10" Height="10" SnapsToDevicePixels="True">
                        <Rectangle Fill="Transparent" />
                        <Ellipse Width="7" Height="7"
                                 Fill="{TemplateBinding Panel.Background}"
                                 Stroke="{StaticResource HandleBrush}"
                                 StrokeThickness="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Widgets:HeightDisplay}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Widgets:HeightDisplay}">
                    <Grid Width="22">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition MinHeight="5" MaxHeight="20" />
                            <RowDefinition Height="5" />
                        </Grid.RowDefinitions>
                        <Path Grid.Row="0" Data="M0,0 L1,0 M0.75,0 L0.75,1" SnapsToDevicePixels="True" Stretch="Fill"
                              Stroke="#AC0000" StrokeThickness="1.0" />
                        <TextBlock Grid.Row="1" Margin="8,0,0,1" Padding="1,1,1,1" HorizontalAlignment="Center" FontSize="10">
                            <TextBlock.Text>
                                <MultiBinding Converter="{x:Static Converters2:ControlToRealHeightConverter.Instance}" StringFormat="0">
                                    <MultiBinding.Bindings>
                                        <Binding />
                                        <Binding Path="ActualHeight" UpdateSourceTrigger="PropertyChanged" />
                                        <Binding Path="Height" UpdateSourceTrigger="PropertyChanged" />
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </TextBlock.Text>
                            <TextBlock.LayoutTransform>
                                <RotateTransform Angle="270" CenterX="0.5" CenterY="0.5" />
                            </TextBlock.LayoutTransform>
                        </TextBlock>
                        <Path Grid.Row="2" Data="M0.75,0 L0.75,3 M0,3 L1,3 " SnapsToDevicePixels="True" Stretch="Fill"
                              Stroke="#AC0000" StrokeThickness="1.0" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Widgets:WidthDisplay}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Widgets:WidthDisplay}">
                    <Grid Height="22" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition MinWidth="5" MaxWidth="20" />
                            <ColumnDefinition Width="5" />
                        </Grid.ColumnDefinitions>
                        <Path Grid.Column="0" Data="M0,0 L0,1 M0,0.75 L1,0.75" SnapsToDevicePixels="True" Stretch="Fill"
                              Stroke="#AC0000" StrokeThickness="1" />
                        <TextBlock Grid.Column="1" Margin="0,8,0,0" Padding="1,1,1,1" HorizontalAlignment="Center" FontSize="10">
                            <TextBlock.Text>
                                <MultiBinding Converter="{x:Static Converters2:ControlToRealWidthConverter.Instance}" StringFormat="0">
                                    <MultiBinding.Bindings>
                                        <Binding />
                                        <Binding Path="ActualWidth" UpdateSourceTrigger="PropertyChanged" />
                                        <Binding Path="Width" UpdateSourceTrigger="PropertyChanged" />
                                    </MultiBinding.Bindings>
                                </MultiBinding>
                            </TextBlock.Text>
                        </TextBlock>
                        <Path Grid.Column="2" Data="M0,0.75 L3,0.75 M3,0 L3,1 " SnapsToDevicePixels="True" Stretch="Fill"
                              Stroke="#AC0000" StrokeThickness="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<Style TargetType="{x:Type Controls:InPlaceEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:InPlaceEditor}">
                    <Grid Margin="-2,1,-10,0">
                        <RichTextBox BorderThickness="0" Name="PART_Editor" SnapsToDevicePixels="True" Padding="{Binding Path=Padding}" FontSize="{Binding Path=FontSize}" FontFamily="{Binding Path=FontFamily}" FontStyle="{Binding Path=FontStyle}" FontStretch="{Binding Path=FontStretch}" FontWeight="{Binding Path=FontWeight}" AcceptsReturn="True" />
                        <formatedTextEditor:RichTextBoxToolbar x:Name="PART_Toolbar" Margin="0,-50,-160,0" RichTextBox="{Binding ElementName=PART_Editor}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    <Style TargetType="{x:Type Widgets:QuickOperationMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Widgets:QuickOperationMenu}">
                    <Menu Name="menu1" Width="15" Height="15" HorizontalAlignment="Left" VerticalAlignment="Top"
                          Background="Transparent" BorderThickness="0">
                        <MenuItem Name="MainHeader" Width="15" Height="15" Padding="0" Background="Transparent" BorderThickness="1">
                            <MenuItem.Header>
                                <Path Data="M3.5,5.5 L11.5,5.5 L7.5,11 z" Fill="Black" Stroke="Gray" StrokeThickness="1" />
                            </MenuItem.Header>
                        </MenuItem>
                    </Menu>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 设计界面滚动条样式 -->
    <Style TargetType="{x:Type Controls:ZoomControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:ZoomControl}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Storyboard1">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Storyboard2">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Panel.Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Name="PART_Presenter" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3"
                                                Margin="{TemplateBinding Control.Padding}"
                                                CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                                Content="{TemplateBinding ContentControl.Content}"
                                                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}">
                            <ScrollContentPresenter.LayoutTransform>
                                <ScaleTransform ScaleX="{Binding Path=CurrentZoom, RelativeSource={RelativeSource Mode=TemplatedParent}}" ScaleY="{Binding Path=CurrentZoom, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                            </ScrollContentPresenter.LayoutTransform>
                        </ScrollContentPresenter>
                        <ContentControl Grid.Row="1" Grid.Column="1" Content="{TemplateBinding AdditionalControls}" />
                        <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Row="0" Grid.Column="3"
                                   AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   Minimum="0" Opacity="0"
                                   Style="{StaticResource ScrollBarBaseStyle}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Grid.Column="2" VerticalAlignment="Bottom"
                                   AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Minimum="0" Opacity="0" Orientation="Horizontal"
                                   Style="{StaticResource ScrollBarBaseStyle}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ClearButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#FFaaaaaa" />
        <Setter Property="BorderBrush" Value="#FFaaaaaa" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Width="14" Height="14">
                        <Ellipse x:Name="ellipse" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" />
                        <Ellipse x:Name="ellipseHighlight" Fill="#FFBD7777" Opacity="0" Stroke="Red" />
                        <Path x:Name="path" Margin="4.5" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Data="M0.5,0.5 L8.5,8.5 M8.5000095,0.50000072 L0.50000954,8.500001" Stretch="Fill"
                              Stroke="{TemplateBinding Foreground}"
                              UseLayoutRounding="False" />
                        <Path x:Name="pathHighlight" Margin="4.5" HorizontalAlignment="Center" VerticalAlignment="Center"
                              Data="M0.5,0.5 L8.5,8.5 M8.5000095,0.50000072 L0.50000954,8.500001" Opacity="0" Stretch="Fill"
                              Stroke="Red" UseLayoutRounding="False" />
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed" />
                        <Rectangle x:Name="DisabledVisualElement" Fill="#FFFFFFFF" IsHitTestVisible="false" Opacity="0" RadiusX="3"
                                   RadiusY="3" />
                        <Rectangle x:Name="FocusVisualElement" Margin="1" IsHitTestVisible="false" Opacity="0" RadiusX="2" RadiusY="2"
                                   Stroke="#FF6DBDD1" StrokeThickness="1" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="00:00:00.2000000" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipseHighlight" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ellipseHighlight" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetName="pathHighlight" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Widgets:ClearableTextBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="#888" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Widgets:ClearableTextBox}">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="1" />
                        <ScrollViewer x:Name="PART_ContentHost" Margin="0,0,18,0" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Button x:Name="TextRemover" Width="14" Height="14" Margin="0,0,3,0" HorizontalAlignment="Right"
                                VerticalAlignment="Stretch" IsTabStop="False" RenderTransformOrigin="0.5,0.5"
                                Style="{StaticResource ClearButtonStyle}">
                            <Button.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Button.RenderTransform>
                        </Button>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="TextRemoverStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="00:00:00.3000000" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="TextRemoverVisible">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TextRemover" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Duration="00:00:00.0010000">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TextRemover" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Duration="00:00:00.0010000">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TextRemover" Storyboard.TargetProperty="(UIElement.Opacity)" Duration="00:00:00.0010000">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="TextRemoverHidden">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TextRemover" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Duration="00:00:00.0010000">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TextRemover" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Duration="00:00:00.0010000">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TextRemover" Storyboard.TargetProperty="(UIElement.Opacity)" Duration="00:00:00.0010000">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Widgets:RenderTransformOriginThumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Widgets:RenderTransformOriginThumb}">
                    <Grid Width="10" Height="10" Margin="-5,-5,-5,-5">
                        <Ellipse Width="2" Height="2" Fill="Black" />
                        <Ellipse Width="10" Height="10" Fill="Transparent" Stroke="Black" StrokeThickness="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
